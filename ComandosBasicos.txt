CONFIGURACION BASICA DE git
Ejecutando en la terminal de git BASH:
git --version #ver que version de git se esta ejecutando
git config --global user.name MAICK #indicamos global para que se actualice en todos los proyectos y no solo en el actualice
                                    #se indica a git el nombre del usuario
git config --global user.email maick298@gmail.com
git config --global core.editor "code --wait" # "--wait"es para que git espere a que cerremos el editor de texto
git config --global -e #abrimos la configuracion del codigo en el editor de texto

#Cuando se trata un archivo entre usuarios de otros sistemas operativos, se debe configurar los saltos de linea que maneja cada Sistema operatio (SO)
config --global core.autocrlf true
#true: Windows
#false: Linux
#input: Mac

COMANDOS BASICOS
-ls: indica todos los archivos o carpetas que hay en el proyectos
-pwd: indica donde me encuentro en el proyecto
-cd: movimiento entre carpetas "cd NombreCarpeta"
-cd ..: salir de una carpetas
-mkdir: Crear una carpetas
-ls -a: Mostrar todos los archivos ocultos
#En la  carpeta .git (esta oculto) se guarda toda la informacion del proyecto de git, versiones usuarios etc
-code .: abrir en que carpeta estoy
-git status: muestra el estado de los archivos, si estan actualizados, traquedos, commit etc
#untracked file: son los archivos los cuales git no les esta haciendo un seguimiento, usamos git add para agregar archivos

STAGE
-git add "nombrearchivo": Se indica que archivos se entran para la etapa de stage
#Stage: Estado de espera entre subir el archivo (commit) al servidor. 
#cuando se indica get add, se indica que esa version del archivo es la que se va subir, esa modificacion del archivo es lo que se sube
#Si se realiza un cambio despues de indicar el get add, esta modificacion no se actulizara al stage. se debera ejecutar otra vez git add

COMMIT
git commit -m "Commit inicial"
#comando para realizar el commit de manera directa, se indica el comentario entre comillas
git commit
#Comando que abrira el editor de texto en el cual se podra personalizar el mensaje

BORRAR ARCHIVOS
rm "archivo"
git add "archivo"
#para borar archivos, se sigue el mismo procedimiento de realizar el git add y despues commit. Es como si fuera una modificacion mas
se puede ejecutar: git rm "nombre archivo"

RECUPERAR ARCHIVOS BORRADOS
git restore --stage "archivo" #recuperamos un archivo borrado a la etapa de stage
#Despues para sacar de la etapa de stage y recuperarlo del todo se usa:
git restore "archivo"

MOVER O CAMBIAR NOMBRES
mv "archivo" "archivo.txt" #se cambia el nombre de archivo a archivo.txt
#git entiende que se elimino archivo y se creo uno nuevo con el nombre de archivo. Por lo tanto se debe realizar nuevamente el git add
git add archivos archivos.txt #se agregan los dos archivos a la etapa de stage separandolos por un espacio. POr ultimo se debe realizar el commit
git mv archivos archivos.txt

IGNORAR ARCHIVOS
#Para ignorar una archivo para que no se realice un commit por accidente, bases de datos o contrase√±as
#se debe crear un archivo llamado gitignore, y en este se debe indicar los nombres de los archivos a ignorar

STATUS CORTO
#se usa normalmente git status, pero da informacion de mas. por lo tanto si se usa: git status -s: se podra ver de forma reducida el estado
de los archivos. En verde los que estan en stage, listos para realizar el commit. En rojo los no estan listos para ser subidos y falta un git add
M:modificate D:Delete A:add(en stage)

VISUALIZAR CAMBIOS
git diff #muestra el texto que se esta cambiando, en rojo lo que se borra, en verde lo nuevo. Para salir se oprime la letra U o Q
git diff --stage: Solo se muestran los cambios que estan en etapa en stage

VER HISTORIAL
git log #ver el historial de manera completa
git log --oneline # historial de manera mas resumida

TRABAJO RAMIFICADO
#Cuando se trabaja con diferentes personas para controlar los cambios se deben crear ramas, en estas no se modificara nada nuevo que realizan las otras
#personas hasta que se unan las ramas. La rama principal sera por defecto main.
git branch #para ver en que rama nos encontramos ahora mismo
git checkout -b nombrerama #para crear una nueva rama llamada nombrerama
#Cada rama tiene su version de los archivos, por lo tanto si se cambia de rama los archivos volveran a su version que estan en la rama principal
#Explicacion: un archivo con solo "hola" en la rama principal, si se cambia a la ramasecundaria y se modifica a "hola como estas". al volver a la rama
#Principal solo tendra hola, pues la modificacion estaria en la ramasecundaria. Esto ocurre activamente en tiempo real hasta en los archivos que ya estan abiertos
#Para traer los datos de la ramasecundaria a la principal se usa
git merge ramasecundaria #usandola en la rama principal, se unira en una sola rama

SUBIR CODIGO A GITHUB
#Se crea un repositorio a github. una vez creado se ejecuta el codigo con el link:
git remote add origin https://github.com/MaickMos/GitTest.git #-git remote: indica que se tiene un servidor remoto
#-add orgin: indica de a donde se debera cargar y descargar la informacion del codigo
git push -u origin main
Se le dice donde guarde los cambios que seria en la rama principal (main), pero como aun no esta creada en el repositorio en github la creamos con este comando
- git push: comando para subir los cambios
- -u origin main: con -u creamos la rama, con origin le indicamos donde debe ser creada la rama y main el nombre de la rama
